//Implement insertion( at the begenning, at the specified location, at the end) and deletion(at the begenning, at specified location, at the end) on a double linked list and circular double linked list//
#include <stdio.h>
#include <stdlib.h>

typedef struct node
{
    struct node *prev;
    int info;
    struct node *next;
} node;

void MAINMENU();

//  ----------------- DOUBLE Linked List --------------------------------

void display(node *head)
{
    if (head == NULL)
    {
        printf("List is empty.\n");
        return;
    }

    node *temp = head;
    while (temp != NULL)
    {
        printf("%d -> ", temp->info);
        temp = temp->next;
    }
    printf("NULL\n");
}

node *endinsert(node *head, int data)
{
    node *newNode = (node *)malloc(sizeof(node));
    newNode->prev= NULL;
    newNode->info = data;
    newNode->next = NULL;

    if (head == NULL)
    {
        // If the list is empty, the new node becomes the head.
        head = newNode;
    }
    else
    {
        node *temp = head;
        while (temp->next != NULL)
        {
            temp = temp->next;
        }
        // Attach the new node to the last node.
        temp->next=newNode;
        newNode->prev=temp;
    }

    return head;
}

node *begininsert(node *head, int data)
{
    node *newNode = (node *)malloc(sizeof(node));
    newNode->info = data;

    if (head == NULL)
    {
        // If the list is empty, the new node becomes the head.
        newNode->next = NULL;
        newNode->prev=NULL;
        head = newNode;
    }
    else
    {
        newNode->next=head;
        head->prev=newNode;
        head=newNode;
    }

    return head;
}

node *locinsert(node *head, int data, int pos)
{
    if (pos < 0)
    {
        printf("\nInvalid Position\n");
        return head;
    }
    else if (pos == 0)
    {
        head = begininsert(head, data);
        return head;
    }

    node *newNode = (node *)malloc(sizeof(node));
    newNode->info = data;

    if (head == NULL)
    {
        if (pos > 0)
        {
            printf("\nInvalid Position\n");
            return head;
        }
        // If the list is empty, the new node becomes the head.
        newNode->next = NULL;
        newNode->prev = NULL;
        head = newNode;
    }
    else
    {
        node *temp = head;
        while (pos>1)
        {
            temp = temp->next;
            pos--;
        }
        if (temp == NULL)
        {
            printf("Invalid position.\n");
            return head;
        }
        newNode->next = temp->next;
        temp->next = newNode;
        temp->next->prev= newNode;
        newNode->prev=temp;
    }

    return head;
}

node *enddelete(node *head)
{
    if (head == NULL)
    {
        printf("List is empty!!\n");
        return head;
    }
    else if (head->next == NULL)
    {
        free(head);
        head = NULL;
    }
    else
    {
        node *temp = head;
        while (temp->next != NULL)
        {
            temp = temp->next;
        }
        node *temp2=NULL;
        temp2 = temp->prev;
        temp2->next=NULL;
        free(temp);
        temp=NULL;
    }

    return head;
}

node *begindelete(node *head)
{
    if (head == NULL)
    {
        printf("List is empty!!\n");
        return head;
    }
    else if (head->next == NULL)
    {
        free(head);
        head = NULL;
    }
    else
    {
        head=head->next;
        free(head->prev);
        head->prev=NULL;
    }

    return head;
}

node *locdelete(node *head, int pos)
{
    if (pos <= 0)
    {
        printf("\nInvalid Position\n");
        return head;
    }
    else if (pos == 1)
    {
        head = begindelete(head);
        return head;
    }

    if (head == NULL)
    {
        printf("List is empty!!\n");
        return head;
    }
    else
    {
        node *temp = head;
        node * temp2=NULL;
        while (pos>1)
        {
            temp = temp->next;
            pos--;
        }

        if(temp->next==NULL)
        {
            head= enddelete(head);
        }
        else
        {
            temp2=temp->prev;
            temp2->next=temp->next;
            temp->next->prev=temp2;
            free(temp);
        }
    }
    return head;
}


//  <<<----------------- Circular Double Linked List -------------------------------->>>

void displaycircular(node *tail)
{
    if (tail== NULL)
    {
        printf("List is empty.\n");
        return;
    }

    node *temp = tail->next;

    do
    {
        printf("%d -> ", temp->info);
        temp = temp->next;
    }
    while (temp!=tail->next);

    printf("Tail\n");

}

node *beginInsert(node *tail, int data)
{
    node *newNode = (node *)malloc(sizeof(node));
    newNode->info = data;

    if (tail == NULL)
    {
        // If the list is empty, the new node becomes the head.
        newNode->next = newNode;
        newNode->prev = newNode;
        tail = newNode;
    }
    else
    {
        node *temp = NULL;
        temp=tail->next;
        newNode->next=temp;
        newNode->prev=tail;
        tail->next=newNode;
        temp->prev=newNode;
    }

    return tail;
}

node *endInsert(node *tail, int data)
{
    node *newNode = (node *)malloc(sizeof(node));
    newNode->info = data;

    if (tail == NULL)
    {
        // If the list is empty, the new node becomes the head.
        tail = newNode;
        newNode->next = newNode;
        newNode->prev=newNode;
    }
    else
    {
        node *temp = tail->next;
        newNode->next=temp;
        newNode->prev=tail;
        tail->next=newNode;
        temp->prev=newNode;
        tail=tail->next;
    }

    return tail;
}

node *locInsert(node *tail, int data, int pos)
{
    if (pos< 0)
    {
        printf("\nInvalid Position\n");
        return tail;
    }
    else if (pos == 0)
    {
        // Insert at the beginning if location is 0.
        tail= beginInsert(tail, data);
        return tail;
    }

    node *newNode = (node *)malloc(sizeof(node));
    newNode->info = data;

    if (tail == NULL)
    {
        if (pos == 0)
        {
            // If the list is empty and location is 0, the new node becomes the head.
            tail = newNode;
            newNode->next = tail;
        }
        else
        {
            printf("\nInvalid Position\n");
        }
    }
    else
    {
        node *temp = tail->next;
        while(pos>1)
        {
            temp=temp->next;
            pos--;
        }
        newNode->next=temp->next;
        newNode->prev=temp;
        temp->next->prev=newNode;
        temp->next=newNode;
        if(temp==tail)
        {
            tail=tail->next;
        }
    }

    return tail;
}


node *endDelete(node *tail)
{
    if (tail == NULL)
    {
        printf("List is empty!!\n");
        return tail;
    }
    else if (tail->next == tail)
    {
        free(tail);
        tail = NULL;
    }
    else
    {
        node *temp = tail->prev;
        temp->next=tail->next;
        tail->next->prev=temp;
        free(tail);
        tail=temp;
    }

    return tail;
}

node *beginDelete(node *tail)
{
    if (tail == NULL)
    {
        printf("List is empty!!\n");
        return tail;
    }
    else if (tail->next == tail)
    {
        free(tail);
        tail = NULL;
    }
    else
    {
        node *temp = tail->next;
        tail->next=temp->next;
        temp->next->prev=tail;
        free(temp);
        temp=NULL;
    }

    return tail;
}

node *locDelete(node *tail, int pos)
{
    if (pos <=0)
    {
        printf("\nInvalid Position\n");
        return tail;
    }
    else if (pos == 1)
    {
        // Delete the first node if location is 0.
        tail=beginDelete(tail);
        return tail;
    }

    if (tail == NULL)
    {
        printf("List is empty!\n");
        return tail;
    }

    node* temp = tail->next;
    node*temp2=NULL;

    while(pos>1)
    {
        temp=temp->next;
        pos--;
    }
    temp2=temp->prev;
    temp2->next=temp->next;
    temp->next->prev=temp2;
    free(temp);
    if(temp==tail)
    {
        tail=temp2;
    }
    return tail;
}




//  <<<--------------------- Menu of Double Linked List -------------------------------->>>

void DLLMENU()
{
    node *head = (node *)malloc(sizeof(node));
    head=NULL;
    int choice, data, pos;
    char c, pos_choice;
    while (1)
    {
        printf("\nDouble Linked List Operations:\n\n");
        printf("1. Insert at the beginning\n");
        printf("2. Insert at the end\n");
        printf("3. Insert at a specific location\n");
        printf("4. Delete at the beginning\n");
        printf("5. Delete at the end\n");
        printf("6. Delete at a specific location\n");
        printf("7. Display the list\n");
        printf("8. Back to Main Menu\n");
        printf("9. Exit\n");
        printf("Enter your choice: ");
        if(scanf("%d", &choice) != 1)
        {
            printf("\n*****Error! Please Enter an integer value ****** \n");
            while (getchar() != '\n');
            continue;
        }


        switch (choice)
        {
        case 1:
            printf("Enter data to insert at the beginning: ");
            if(scanf("%d", &data) != 1)
            {
                printf("\n*****Error! Please Enter a integer value ****** \n");
                while (getchar() != '\n');
                continue;
            }
            head = begininsert(head, data);
            printf("DLL after insertion : ");
            display(head);
            break;
        case 2:
            printf("Enter data to insert at the end: ");
            if(scanf("%d", &data) != 1)
            {
                printf("\n*****Error! Please Enter an integer value ****** \n");
                while (getchar() != '\n');
                continue;
            }
            head = endinsert(head, data);
            printf("DLL after insertion : ");
            display(head);
            break;
        case 3:
restart:
            printf("Enter data to insert: ");
            if(scanf("%d", &data) != 1)
            {
                printf("\n***** Error !Please Enter an integer value ****** \n");
                while (getchar() != '\n');
                continue;
            }
            printf("Enter the position after which you want to insert new node: ");
            if(scanf("%d", &pos) != 1)
            {
                printf("\n***** Error! Please Enter an integer value ****** \n");
                while (getchar() != '\n');
                continue;
            };
            printf("Are you sure you want to insert node after %d position (y/n) : ", pos);
            scanf(" %c", &pos_choice);
            if (pos_choice == 'n')
            {
                printf("Re-enter position of node after which you want to insert node now : ");
                if(scanf("%d", &pos) != 1)
                {
                    printf("\n***** Error !Please Enter an integer value ****** \n");
                    while (getchar() != '\n');
                    continue;
                };
            }
            else if (pos_choice != 'y')
            {
                printf("Invalid Input\n");
                printf("Starting Again...\n");
                goto restart;
            }
            head = locinsert(head, data, pos);
            printf("DLL after insertion : ");
            display(head);
            break;
        case 4:
            head = begindelete(head);
            printf("DLL after deletion : ");
            display(head);
            break;
        case 5:
            head = enddelete(head);
            printf("DLL after deletion : ");
            display(head);
            break;
        case 6:
deleteAgain:
            printf("Enter the position to delete node : ");
            if(scanf("%d", &pos) != 1)
            {
                printf("\n***** Error!Please Enter a integer value ****** \n");
                while (getchar() != '\n');
                continue;
            }
            printf("Are you sure you want to delete node at %d position (y/n) : ", pos);
            scanf(" %c", &pos_choice);
            if (pos_choice == 'n')
            {
                printf("Re-nter position of node where you want to delete node : ");
                if(scanf(" %d", &pos) != 1)
                {


                    printf("\n*****Error! Please Enter a integer value ****** \n");
                    while (getchar() != '\n');
                    continue;
                }
            }
            else if (pos_choice != 'y')
            {
                printf("Invalid Input\n");
                printf("Starting Again...\n");
                goto deleteAgain;
            }
            head = locdelete(head, pos);
            printf("DLL after insertion : ");
            display(head);
            break;
        case 7:
            printf("\n Your Single Linked List is  : ");
            display(head);
            break;
        case 8:
            printf("Are you sure you want to go back to Main Menu?\n****Your Previous data will be lost**** (y/n): ");
            scanf(" %c", &c);
            if (c == 'y')
                MAINMENU();
            else if (c == 'n')
                continue;
            else
                printf("\nInvalid Input!\n");
            break;
        case 9:
            printf("Are you sure you want to exit program? (y/n) : ");
            scanf(" %c", &c);
            if (c == 'y')
                exit(0);
            else if (c != 'n')
                printf("\nInvalid Input!\n");
            break;
        default:
            printf("Invalid choice. Please try again.\n");
        }
    }
}

//  ---------------------- Menu of Circular Double Linked List ------------------------------

void CDLLMENU()
{
    node *tail = (node *)malloc(sizeof(node));
    tail = NULL;
    int choice, data, pos;
    char c, pos_choice;
    while (1)
    {
        printf("\nCircular Double Linked List Operations:\n\n");
        printf("1. Insert at the beginning\n");
        printf("2. Insert at the end\n");
        printf("3. Insert at a specific location\n");
        printf("4. Delete at the beginning\n");
        printf("5. Delete at the end\n");
        printf("6. Delete at a specific location\n");
        printf("7. Display the list\n");
        printf("8. Back to Main Menu\n");
        printf("9. Exit\n");
        printf("Enter your choice: ");
        if(scanf("%d", &choice) != 1)
        {
            printf("\n***** Error!Please Enter a integer value ****** \n");
            while (getchar() != '\n');
            continue;
        }

        switch (choice)
        {
        case 1:
            printf("Enter data to insert at the beginning: ");
            if(scanf("%d", &data) != 1)
            {
                printf("\n*****Error! Please Enter a integer value ****** \n");
                while (getchar() != '\n');
                continue;
            }
            tail = beginInsert(tail, data);
            printf("CDLL after insertion : ");
            displaycircular(tail);
            break;
        case 2:
            printf("Enter data to insert at the end: ");
            if(scanf("%d", &data) != 1)
            {
                printf("\n***** Error!Please Enter a integer value ****** \n");
                while (getchar() != '\n');
                continue;
            }
            tail = endInsert(tail, data);
            printf("CDLL after insertion : ");
            displaycircular(tail);
            break;
        case 3:
restart:
            printf("Enter data to insert: ");
            if(scanf("%d", &data) != 1)
            {
                printf("\n*****Error! Please Enter a integer value ****** \n");
                while (getchar() != '\n');
                continue;
            }
            printf("Enter the position after which you want to insert your new node: ");
            if(scanf("%d", &pos) != 1)
            {
                printf("\n***** Please Enter a integer value ****** \n");
                while (getchar() != '\n');
                continue;
            }
            printf("Are you sure you want to insert node at %d position (y/n) : ", pos);
            scanf(" %c", &pos_choice);
            if (pos_choice == 'n')
            {
                printf("Re-nter the position of node after which you want to insert node : ");
                if(scanf(" %d", &pos) != 1)
                {
                    printf("\n*****Error! Please Enter a integer value ****** \n");
                    while (getchar() != '\n');
                    continue;
                };
            }
            else if (pos_choice != 'y')
            {
                printf("Invalid Input :/\n");
                printf("Starting Again...\n");
                goto restart;
            }
            tail = locInsert(tail, data, pos);
            printf("CDLL after insertion : ");
            displaycircular(tail);
            break;
        case 4:
            tail = beginDelete(tail);
            printf("CDLL after deletion : ");
            displaycircular(tail);
            break;
        case 5:
            tail = endDelete(tail);
            printf("CDLL after deletion : ");
            displaycircular(tail);
            break;
        case 6:
del:
            printf("Enter the position to delete node : ");
            if(scanf("%d", &pos)!=1)
            {
                printf("\n*****Error! Please Enter a integer value ****** \n");
                while (getchar() != '\n');
                continue;
            }
            printf("Are you sure you want to delete node at %d position (y/n) : ", pos);
            scanf(" %c", &pos_choice);
            if (pos_choice == 'n')
            {
                printf("Re-nter position of node you want to delete  : ");
                if(scanf(" %d", &pos) != 1)
                {
                    printf("\n***** Please Enter a integer value ****** \n");
                    while (getchar() != '\n'); // Clear the input buffer
                    continue;
                }
            }
            else if (pos_choice != 'y')
            {
                printf("Invalid Input\n");
                printf("Starting Again...\n");
                goto del;
            }
            tail = locDelete(tail, pos);
            printf("Nodes after deletion : ");
            displaycircular(tail);
            break;
        case 7:
            printf("\n Your cicular Linked List is: ");
            displaycircular(tail);
            break;
        case 8:
            printf("Are you sure you want to go back to Main Menu?\n**** Your previous data will be erased !! **** (y/n): ");
            scanf(" %c", &c);
            if (c == 'y')
                MAINMENU();
            else if (c == 'n')
                continue;
            else
                printf("\nInvalid Input!\n");
            break;
        case 9:
            printf("Are you sure you want to exit program? (y/n) : ");
            scanf(" %c", &c);
            if (c == 'y')
                exit(0);
            else if (c != 'n')
                printf("\nInvalid Input!\n");
            break;
        default:
            printf("Invalid choice. Please try again.\n");
        }
    }
}

//  <<<--------------------------- Main Menu ------------------------------>>>

void MAINMENU()
{

    node *head = (node *)malloc(sizeof(node));
    head = NULL;
    int choice;
    char c;

    while (1)
    {

        printf("\n================================ Main Menu =============================\n");
        printf("\nSelect type of linked list you want :\n");
        printf("1. Double Linked List\n");
        printf("2. Circular Double Linked List\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        if (scanf("%d", &choice) != 1)
        {
            printf("\n*****Error! Please Enter a integer value ****** \n");
            while (getchar() != '\n');
            continue;
        }
        switch (choice)
        {
        case 1:
            DLLMENU();
            break;
        case 2:
            CDLLMENU();
            break;
        case 3:
            printf("Are you sure you want to exit program? (y/n) : ");
            scanf(" %c", &c);
            if (c == 'y')
            {
                printf("\n closing the program...\n");
                exit(0);
            }
            else if (c != 'n')
                printf("\n Oops !Invalid Input!\n");
            break;
        default:
            printf("Invalid choice. Please try again.\n");
        }
    }
}

int main()
{
    MAINMENU();
    return 0;
}
